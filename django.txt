****
# Creating ENV
python -m virtualenv my_env

FOR PIPENV
python -m pipenv install django

python -m pipenv shell

django-admin startproject storefront . (. is to store the main folder without createing new folder)
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted


# changing the main folder name of the project
- mv projectName newName
****

python -m django startproject mysite
python manage.py shell
python manage.py runserver

# creating the database

# Creating app 
    python manage.py startapp app_name

# Create urls.py 
    create the new urls.py in newly created app_name
# Write your first view
# Create the path in new urls.py in apps 
# add the url of the app in the main setting 



TODO List:
1. Templates
    - register the app setting.py (main project folder) 
    - create template folder for main body and nav.
        - add the dir in the settings.py (main project folder) 
    - create static folder. (img, js, css)
        - add the dir for static folder in setting.py (main project folder) 
2. Create admin user
    - python manage.py makemigrations
    - python manage.py migrate
        - migrate first if the project is new or not make the first migrations.
    - python manage.py createsuperuser 
3. Database / Models
    - User/author
        - create a model for user 
        - class ClassName(models.Model)
            - Contain username and email
    
    - Content / Post
        - Create new model for posted blog
            - Contains title, content, data_posted, and author (foreign_key)
    ---------------------------------------------------
    - Register the model in admin.py
        - admin.site.register(Blog_User)
        - admin.site.register(Post)

   
4. Display the data in the blog
    - import the model to the view
    - the imported model new to instantiate to get the all fields
        - Post.objects.all() // To get the fields
    - add the added model as dictionary in the render Form
        - render(request, url, model_dictionary)
    - to display the data, us the for loop to display
        - for loop_name in model_dictionary key
            - for post in Post
    - at last to display the data, use {{}} and put the loop_name next with '.' then the field name of the data need
        - {{ post.title }} // it will display all the data that have in the field 'title'.

5. Creating a Form
    - Create new file named 'forms.py' in the app folder.
    - import / from django.forms import ModelForm
    - import the models that you want to create a form
    - after that create new class 
        - class PostForm(ModelForm):
    - inside of new class create another class named 'meta'.
        - class Meta:
    - inside the class meta, create a variable named 'model' and 'fields'
        -  model = Post
        -  fields = []
            - model variable will get the desired model that will form will be accessing
            - fields variable will tell what will be featured in the created form and it controls the sequence of the form fields,
                - fields = ['author', 'title', 'content']
                
    - Create new class in the view and import the form 
    - create a variable that will hold the form 
        - form = PostForm() 
    - Create new urlpattern for the template where the form will be displayed
    - Create new Templates
        - Create a HTML form structure
        - 2 methods POST or GET
    - Inside the HTML Form add the csrf token and the form
        - {% csrf_token %} // csrf_token is a django security for posting or sending the data.
        - {{ form }} // Form is variable because this the form the create in forms.py that we imported in views

5.5. Posting / saving the data in form
    - To save the form data.
    - Start with the view where the form came from.
    - use the if statement and put .POST
        - if request.POST:
            - This make sure if the form coming in a POST request or not, then 
    - add new form and add the request.POST inside of it.
        - form = PostForm(request.POST)
            - This make new form that have a data inputted intact in the form.
    - To verify if the inputted data is correct or valid in the fields 
        - if form.is_valid():
            - This is to verify if the data is valid.
    - after verifying, final you can saved the data in the database.
        - form.save()
            - This will save the data in form to the database
    - after saving, you can control where the destination of the page after saving 
        - return redirect( name of the page in url )
-----------------------------------------------------------
5.6 Viewing Specific Database
    - To view the posted data, first create new function view with additional parameter 'pk' or primary key.
        - def viewPost(request, pk):
            - pk will expect data, like id 
    - create a variable that filter id from the model.
        - post = Post.objects.filter(id=pk)
            - this will filter the data to specific one, then render it
    - create new url for the view post.
        - path("post/<str:pk>", views.viewPost, name="view-post"),
            - the "<str:pk>", this show that we need a specific data to access the page.
    - create the template for the view post, and like in the home page you just need to iterate it to display the data.

    - To access the specific data, you can make a specific link in the post, and the url in href will be like this.
        - {% url 'view-post ' iterateName.id %}
            - the 'iterateName.id' is the data needed in the urlpatterns that we created a while ago.
            - "post/<str:pk>", the <str:pk> represent the 'iterateName.id' in the link.

5.9 Login Form
    - Login Function
        - Register ✔
        - Login ✔
        - Logout ✔
    *****
    - Create new app for the Login functions (named: users)
    - New flow of coding
        - Models > Forms > Templates > urls > views 
    
    * Register Form
    - Create new form in forms.py 
        - Import the "UserCreationForms" and the "User"
            - the "UserCreationForms" is used for creating a new user that can use our web application.
        - create new class named "UserRegistrationForm" inside the parameter is the "UserCreationForms".
            - we do this because we will modify the "UserCreationForms" and add new field.
        - create a email variable with email field.
            - email = forms.EmailField()
        - after creating the field, create a new class inside the parent class named "Meta"
        - add the model we want to save the field data
            - In this instance we want to save our data in User model.
        - add the "fields" variable and create a square bracket inside of it is the list of the fields.
            - This is used for the display of the field that will be shown.
    -  add the url in the main settings, import the views.py in it.
    - Create the function in the views.py
        - if the method is POST
        - check if the form is valid
        - if valid, then save.
        - then redirect it to login button
        - if the method is not POST, send the blank form
    
    * Login Form
    - import the "AuthenticationForm" and [login, logout, authenticate] in the views.py 
        - "AuthenticationForm"is a built-in function for authentication.
    - Checks if the method is POST
    - putting the data in a form variable with the AuthenticationForm. 
		- form = AuthenticationForm(request, data=request.POST)
    - Check if valid
    - get the username and password in a variable
        - username = form.cleaned_data.get('username')
		- password = form.cleaned_data.get('password')
    - Authenticate the username and password
        - user = authenticate(username=username, password=password)
            - this will return a object if the data is valid and if not there will be no object returning
    - check if the user is authenticated
    - if authenticated, login and redirect 
        - login(request, user)
            - login is a function that login the data without with more coding thanks to django.
    - create a url
    - create a template
    
    * Logout
    - create new function for logout in views.py 
    - put the function and the request
        - logout(request)
            - this will logout the current login account in the system.
    - redirect where to go after the logout



-------------------------------------------------------------------------------------------------
5. Form
    - Content Form
        - Create ✔ 
        - Edit/Update ✔
        - Delete ✔
-----------------------------------------
    - Blog account Form
        - Create ✔ 
        - Update ✔
        - Upload Picture ✔
-----------------------------------------
6. View all the author posts 
    - view ✔

6. New apps
    - To do List
        - List view ✔
        - List detail view ✔
        - Create list ✔
        - Update ✔
        - Delete ✔
        - Rework the Todolist not like just like a blog post -Urgent-
    - Timer
6. Simplify the list, create, delete, update by using the generic form imported

