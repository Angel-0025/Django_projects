****
# Creating ENV
python -m virtualenv my_env

FOR PIPENV
python -m pipenv install django

python -m pipenv shell

django-admin startproject storefront . (. is to store the main folder without createing new folder)
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted


# changing the main folder name of the project
- mv projectName newName
****

python -m django startproject mysite
python manage.py shell
python manage.py runserver

# creating the database

# Creating app 
    python manage.py startapp app_name

# Create urls.py 
    create the new urls.py in newly created app_name
# Write your first view
# Create the path in new urls.py in apps 
# add the url of the app in the main setting 



TODO List:
1. Templates
    - register the app setting.py (main project folder) 
    - create template folder for main body and nav.
        - add the dir in the settings.py (main project folder) 
    - create static folder. (img, js, css)
        - add the dir for static folder in setting.py (main project folder) 
2. Create admin user
    - python manage.py makemigrations
    - python manage.py migrate
        - migrate first if the project is new or not make the first migrations.
    - python manage.py createsuperuser 
3. Database / Models
    - User/author
        - create a model for user 
        - class ClassName(models.Model)
            - Contain username and email
    
    - Content / Post
        - Create new model for posted blog
            - Contains title, content, data_posted, and author (foreign_key)
    ---------------------------------------------------
    - Register the model in admin.py
        - admin.site.register(Blog_User)
        - admin.site.register(Post)

   
4. Display the data in the blog
    - import the model to the view
    - the imported model new to instantiate to get the all fields
        - Post.objects.all() // To get the fields
    - add the added model as dictionary in the render function
        - render(request, url, model_dictionary)
    - to display the data, us the for loop to display
        - for loop_name in model_dictionary key
            - for post in Post
    - at last to display the data, use {{}} and put the loop_name next with '.' then the field name of the data need
        - {{ post.title }} // it will display all the data that have in the field 'title'.

5. Creating a Form
    - Create new file named 'forms.py' in the app folder.
    - import / from django.forms import ModelForm
    - import the models that you want to create a form
    - after that create new class 
        - class PostForm(ModelForm):
    - inside of new class create another class named 'meta'.
        - class Meta:
    - inside the class meta, create a variable named 'model' and 'fields'
        -  model = Post
        -  fields = []
            - model variable will get the desired model that will form will be accessing
            - fields variable will tell what will be featured in the created form and it controls the sequence of the form fields,
                - fields = ['author', 'title', 'content']
                
    - Create new class in the view and import the form 
    - create a variable that will hold the form 
        - form = PostForm() 
    - Create new urlpattern for the template where the form will be displayed
    - Create new Templates
        - Create a HTML form structure
        - 2 methods POST or GET
    - Inside the HTML Form add the csrf token and the form
        - {% csrf_token %} // csrf_token is a django security for posting or sending the data.
        - {{ form }} // Form is variable because this the form the create in forms.py that we imported in views

5.5. Posting / saving the data in form

5. Form
    - Content Form
        - Create
        - Edit/Update
        - Delete
    - Blog user Form
        - Create 
        - Edit/Update
        - Delete

6. Simplify the list, create, delete, update by using the generic form imported

